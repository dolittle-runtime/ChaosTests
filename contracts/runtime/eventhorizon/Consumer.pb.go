// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Runtime/EventHorizon/Consumer.proto

package eventhorizon

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	artifacts "go.dolittle.io/chaostests/contracts/artifacts"
	protobuf "go.dolittle.io/chaostests/contracts/protobuf"
	services "go.dolittle.io/chaostests/contracts/services"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventHorizonEvent struct {
	StreamSequenceNumber uint64               `protobuf:"varint,1,opt,name=streamSequenceNumber,proto3" json:"streamSequenceNumber,omitempty"`
	Occurred             *timestamp.Timestamp `protobuf:"bytes,2,opt,name=occurred,proto3" json:"occurred,omitempty"`
	EventSourceId        *protobuf.Uuid       `protobuf:"bytes,3,opt,name=eventSourceId,proto3" json:"eventSourceId,omitempty"`
	CorrelationId        *protobuf.Uuid       `protobuf:"bytes,4,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	Type                 *artifacts.Artifact  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Content              string               `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventHorizonEvent) Reset()         { *m = EventHorizonEvent{} }
func (m *EventHorizonEvent) String() string { return proto.CompactTextString(m) }
func (*EventHorizonEvent) ProtoMessage()    {}
func (*EventHorizonEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca952eb24b0cb1a0, []int{0}
}

func (m *EventHorizonEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventHorizonEvent.Unmarshal(m, b)
}
func (m *EventHorizonEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventHorizonEvent.Marshal(b, m, deterministic)
}
func (m *EventHorizonEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventHorizonEvent.Merge(m, src)
}
func (m *EventHorizonEvent) XXX_Size() int {
	return xxx_messageInfo_EventHorizonEvent.Size(m)
}
func (m *EventHorizonEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventHorizonEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EventHorizonEvent proto.InternalMessageInfo

func (m *EventHorizonEvent) GetStreamSequenceNumber() uint64 {
	if m != nil {
		return m.StreamSequenceNumber
	}
	return 0
}

func (m *EventHorizonEvent) GetOccurred() *timestamp.Timestamp {
	if m != nil {
		return m.Occurred
	}
	return nil
}

func (m *EventHorizonEvent) GetEventSourceId() *protobuf.Uuid {
	if m != nil {
		return m.EventSourceId
	}
	return nil
}

func (m *EventHorizonEvent) GetCorrelationId() *protobuf.Uuid {
	if m != nil {
		return m.CorrelationId
	}
	return nil
}

func (m *EventHorizonEvent) GetType() *artifacts.Artifact {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *EventHorizonEvent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ConsumerSubscription struct {
	CallContext          *services.CallRequestContext `protobuf:"bytes,1,opt,name=callContext,proto3" json:"callContext,omitempty"`
	TenantId             *protobuf.Uuid               `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	StreamId             *protobuf.Uuid               `protobuf:"bytes,3,opt,name=streamId,proto3" json:"streamId,omitempty"`
	PartitionId          *protobuf.Uuid               `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	LastReceived         int64                        `protobuf:"varint,5,opt,name=lastReceived,proto3" json:"lastReceived,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ConsumerSubscription) Reset()         { *m = ConsumerSubscription{} }
func (m *ConsumerSubscription) String() string { return proto.CompactTextString(m) }
func (*ConsumerSubscription) ProtoMessage()    {}
func (*ConsumerSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca952eb24b0cb1a0, []int{1}
}

func (m *ConsumerSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerSubscription.Unmarshal(m, b)
}
func (m *ConsumerSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerSubscription.Marshal(b, m, deterministic)
}
func (m *ConsumerSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerSubscription.Merge(m, src)
}
func (m *ConsumerSubscription) XXX_Size() int {
	return xxx_messageInfo_ConsumerSubscription.Size(m)
}
func (m *ConsumerSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerSubscription proto.InternalMessageInfo

func (m *ConsumerSubscription) GetCallContext() *services.CallRequestContext {
	if m != nil {
		return m.CallContext
	}
	return nil
}

func (m *ConsumerSubscription) GetTenantId() *protobuf.Uuid {
	if m != nil {
		return m.TenantId
	}
	return nil
}

func (m *ConsumerSubscription) GetStreamId() *protobuf.Uuid {
	if m != nil {
		return m.StreamId
	}
	return nil
}

func (m *ConsumerSubscription) GetPartitionId() *protobuf.Uuid {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

func (m *ConsumerSubscription) GetLastReceived() int64 {
	if m != nil {
		return m.LastReceived
	}
	return 0
}

type SubscriptionMessage struct {
	// Types that are valid to be assigned to Message:
	//	*SubscriptionMessage_SubscriptionResponse
	//	*SubscriptionMessage_Event
	Message              isSubscriptionMessage_Message `protobuf_oneof:"Message"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SubscriptionMessage) Reset()         { *m = SubscriptionMessage{} }
func (m *SubscriptionMessage) String() string { return proto.CompactTextString(m) }
func (*SubscriptionMessage) ProtoMessage()    {}
func (*SubscriptionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca952eb24b0cb1a0, []int{2}
}

func (m *SubscriptionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionMessage.Unmarshal(m, b)
}
func (m *SubscriptionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionMessage.Marshal(b, m, deterministic)
}
func (m *SubscriptionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionMessage.Merge(m, src)
}
func (m *SubscriptionMessage) XXX_Size() int {
	return xxx_messageInfo_SubscriptionMessage.Size(m)
}
func (m *SubscriptionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionMessage proto.InternalMessageInfo

type isSubscriptionMessage_Message interface {
	isSubscriptionMessage_Message()
}

type SubscriptionMessage_SubscriptionResponse struct {
	SubscriptionResponse *SubscriptionResponse `protobuf:"bytes,1,opt,name=subscriptionResponse,proto3,oneof"`
}

type SubscriptionMessage_Event struct {
	Event *EventHorizonEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

func (*SubscriptionMessage_SubscriptionResponse) isSubscriptionMessage_Message() {}

func (*SubscriptionMessage_Event) isSubscriptionMessage_Message() {}

func (m *SubscriptionMessage) GetMessage() isSubscriptionMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SubscriptionMessage) GetSubscriptionResponse() *SubscriptionResponse {
	if x, ok := m.GetMessage().(*SubscriptionMessage_SubscriptionResponse); ok {
		return x.SubscriptionResponse
	}
	return nil
}

func (m *SubscriptionMessage) GetEvent() *EventHorizonEvent {
	if x, ok := m.GetMessage().(*SubscriptionMessage_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscriptionMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscriptionMessage_SubscriptionResponse)(nil),
		(*SubscriptionMessage_Event)(nil),
	}
}

func init() {
	proto.RegisterType((*EventHorizonEvent)(nil), "dolittle.runtime.eventhorizon.EventHorizonEvent")
	proto.RegisterType((*ConsumerSubscription)(nil), "dolittle.runtime.eventhorizon.ConsumerSubscription")
	proto.RegisterType((*SubscriptionMessage)(nil), "dolittle.runtime.eventhorizon.SubscriptionMessage")
}

func init() {
	proto.RegisterFile("Runtime/EventHorizon/Consumer.proto", fileDescriptor_ca952eb24b0cb1a0)
}

var fileDescriptor_ca952eb24b0cb1a0 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x8e, 0xd3, 0x3e,
	0x14, 0xc5, 0x27, 0x9d, 0xaf, 0xd6, 0xfd, 0xff, 0x17, 0x98, 0x4a, 0x44, 0x15, 0x88, 0xaa, 0x68,
	0x34, 0x5d, 0x25, 0x55, 0x2b, 0x21, 0x58, 0xb0, 0x60, 0xca, 0x47, 0xbb, 0x00, 0x21, 0x17, 0x36,
	0xec, 0x5c, 0xe7, 0x4e, 0xc7, 0x52, 0x62, 0x07, 0xdb, 0xa9, 0x80, 0x25, 0x4f, 0x83, 0x78, 0x13,
	0x1e, 0x80, 0xf7, 0x41, 0x4e, 0xec, 0x36, 0x11, 0x85, 0xc2, 0x2e, 0x75, 0x7f, 0xe7, 0xde, 0xeb,
	0x73, 0x6e, 0x82, 0x1e, 0x90, 0x42, 0x18, 0x9e, 0x41, 0xfc, 0x7c, 0x03, 0xc2, 0xcc, 0xa5, 0xe2,
	0x9f, 0xa5, 0x88, 0x67, 0x52, 0xe8, 0x22, 0x03, 0x15, 0xe5, 0x4a, 0x1a, 0x89, 0xef, 0x25, 0x32,
	0xe5, 0xc6, 0xa4, 0x10, 0xa9, 0x8a, 0x8e, 0xc0, 0xd2, 0x37, 0x15, 0xdd, 0xbf, 0x78, 0x51, 0x88,
	0x84, 0x66, 0x20, 0x0c, 0x4d, 0x75, 0xfc, 0x54, 0x19, 0x7e, 0x4d, 0x99, 0xd9, 0x3d, 0x55, 0x55,
	0xfa, 0x83, 0x06, 0xf6, 0xc6, 0x9e, 0xad, 0x8a, 0xeb, 0xf8, 0x5d, 0xc1, 0x13, 0x47, 0x5c, 0x36,
	0x88, 0x25, 0xa8, 0x0d, 0x67, 0xa0, 0xe3, 0x19, 0x4d, 0xd3, 0x99, 0x14, 0x06, 0x3e, 0xfa, 0x52,
	0xa3, 0xbd, 0x53, 0x2f, 0x8b, 0x95, 0x66, 0x8a, 0xe7, 0x86, 0x4b, 0xa1, 0x1d, 0x79, 0x7f, 0x2d,
	0xe5, 0x3a, 0x85, 0x38, 0xf7, 0xed, 0xac, 0x4c, 0x1b, 0x9a, 0xe5, 0x15, 0x30, 0xfc, 0xde, 0x42,
	0xb7, 0xea, 0x55, 0xca, 0x67, 0x3c, 0x41, 0x3d, 0x6d, 0x14, 0xd0, 0x6c, 0x09, 0x1f, 0x0a, 0x10,
	0x0c, 0x5e, 0x17, 0xd9, 0x0a, 0x54, 0x18, 0x0c, 0x82, 0xd1, 0x09, 0xd9, 0xfb, 0x1f, 0x7e, 0x88,
	0xda, 0x92, 0xb1, 0x42, 0x29, 0x48, 0xc2, 0xd6, 0x20, 0x18, 0x75, 0x27, 0xfd, 0xa8, 0xea, 0x1e,
	0xf9, 0xee, 0xd1, 0x5b, 0xdf, 0x9d, 0x6c, 0x59, 0xfc, 0x04, 0xfd, 0x5f, 0xda, 0xb9, 0x94, 0x85,
	0x62, 0xb0, 0x48, 0xc2, 0xe3, 0x52, 0x7c, 0x27, 0xda, 0xba, 0xbe, 0x95, 0x5b, 0xaf, 0x48, 0x93,
	0xb6, 0x72, 0x26, 0x95, 0x82, 0x94, 0xda, 0x7b, 0x2f, 0x92, 0xf0, 0xe4, 0x80, 0xbc, 0x41, 0xe3,
	0x31, 0x3a, 0x31, 0x9f, 0x72, 0x08, 0x4f, 0x4b, 0xd5, 0xdd, 0x9d, 0x8a, 0xfa, 0x1c, 0x23, 0x9f,
	0x23, 0x29, 0x49, 0x1c, 0xa2, 0x73, 0x66, 0xd3, 0x10, 0x26, 0x3c, 0x1b, 0x04, 0xa3, 0x0e, 0xf1,
	0x3f, 0x87, 0x5f, 0x5b, 0xa8, 0xe7, 0x57, 0xa7, 0x1e, 0x06, 0x7e, 0x89, 0xba, 0x6c, 0x17, 0x62,
	0xe9, 0x62, 0x77, 0x72, 0xb1, 0xeb, 0xa5, 0x5d, 0xd4, 0x91, 0x8d, 0x9a, 0x58, 0x5b, 0xb5, 0x71,
	0x30, 0xa9, 0x2b, 0xf1, 0x14, 0xb5, 0x0d, 0x08, 0x2a, 0xcc, 0xc2, 0x7b, 0xfc, 0xdb, 0x7b, 0x6e,
	0x41, 0x2b, 0xaa, 0x02, 0x3b, 0xec, 0xed, 0x16, 0xc4, 0x8f, 0x51, 0x37, 0xb7, 0x16, 0xfc, 0x9d,
	0xa9, 0x75, 0x16, 0x0f, 0xd1, 0x7f, 0x29, 0xd5, 0x86, 0x00, 0x03, 0xbe, 0x81, 0xa4, 0xb4, 0xf6,
	0x98, 0x34, 0xce, 0x86, 0x3f, 0x02, 0x74, 0xbb, 0x6e, 0xd1, 0x2b, 0xd0, 0x9a, 0xae, 0x01, 0x73,
	0xd4, 0xd3, 0xb5, 0x63, 0x02, 0x3a, 0x97, 0x42, 0x83, 0xb3, 0x6c, 0x1a, 0xfd, 0xf1, 0x4d, 0x8c,
	0x96, 0x7b, 0xa4, 0xf3, 0x23, 0xb2, 0xb7, 0x24, 0x9e, 0xa3, 0xd3, 0x52, 0xec, 0x8c, 0x1c, 0x1f,
	0xa8, 0xfd, 0xcb, 0x4b, 0x32, 0x3f, 0x22, 0x55, 0x81, 0xab, 0x0e, 0x3a, 0x77, 0xf3, 0x4f, 0xbe,
	0x04, 0xa8, 0xed, 0x57, 0x00, 0x6f, 0x50, 0xc7, 0x4d, 0xb4, 0x02, 0x7c, 0x68, 0xf6, 0x7d, 0x8b,
	0xd3, 0x9f, 0xfc, 0xc3, 0x85, 0xdd, 0x08, 0xe3, 0xe0, 0x2a, 0x79, 0xff, 0x68, 0x2d, 0x77, 0x4a,
	0x2e, 0x63, 0x76, 0x43, 0xa5, 0x36, 0xa0, 0x8d, 0x8e, 0xed, 0xb2, 0xaa, 0xf2, 0xfb, 0xe4, 0x2a,
	0xc6, 0xf5, 0x8a, 0xdf, 0x5a, 0x97, 0xcf, 0xbc, 0xce, 0x7d, 0x64, 0x1a, 0x37, 0xb7, 0x63, 0x56,
	0xf2, 0xd5, 0x59, 0xb9, 0x02, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x1f, 0x97, 0x85,
	0x43, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	Subscribe(ctx context.Context, in *ConsumerSubscription, opts ...grpc.CallOption) (Consumer_SubscribeClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Subscribe(ctx context.Context, in *ConsumerSubscription, opts ...grpc.CallOption) (Consumer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consumer_serviceDesc.Streams[0], "/dolittle.runtime.eventhorizon.Consumer/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_SubscribeClient interface {
	Recv() (*SubscriptionMessage, error)
	grpc.ClientStream
}

type consumerSubscribeClient struct {
	grpc.ClientStream
}

func (x *consumerSubscribeClient) Recv() (*SubscriptionMessage, error) {
	m := new(SubscriptionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	Subscribe(*ConsumerSubscription, Consumer_SubscribeServer) error
}

// UnimplementedConsumerServer can be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (*UnimplementedConsumerServer) Subscribe(req *ConsumerSubscription, srv Consumer_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).Subscribe(m, &consumerSubscribeServer{stream})
}

type Consumer_SubscribeServer interface {
	Send(*SubscriptionMessage) error
	grpc.ServerStream
}

type consumerSubscribeServer struct {
	grpc.ServerStream
}

func (x *consumerSubscribeServer) Send(m *SubscriptionMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dolittle.runtime.eventhorizon.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Consumer_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Runtime/EventHorizon/Consumer.proto",
}
